@startuml
loop infinite times
  loop 3 times
        Thread_Simular_batidas -> Thread_Simular_batidas:Gera um valor pseudo aleatorio
        Thread_Simular_batidas -> Thread_Simular_batidas: Escreve um par (ambiente + n batidas)\ndo tipo Mensagem_Envio_Iothub(struct)
        Thread_Simular_batidas -> Fila_Batidas_Acumuladas: Coloca o par na fila
   end
        Thread_Simular_batidas -> Thread_Simular_batidas: entra em sleep\npor 25 segundos
end
note over Thread_Simular_batidas: A string que representa o\nambiente esta sendo um numero\nentre 1, 10 que representa\n o valor da propriedade id\n de cada ambiente.\nPor meio do valor dessa string,\nÃ© possivel recuperar o nome\ndo ambiente
loop infinite times
            loop enquanto nao estiver disponivel
            Thread_EscreveBatidasNaNVS -> xSemaphoreAcessoSpiffs: Verifica disponibilidade\ndo semaforo
            end
            xSemaphoreAcessoSpiffs --> Thread_EscreveBatidasNaNVS:Semaforo livre
            Thread_EscreveBatidasNaNVS -> Fila_Batidas_Acumuladas: Requisita um par
            Fila_Batidas_Acumuladas --> Thread_EscreveBatidasNaNVS: Remove um par e o envia
            Thread_EscreveBatidasNaNVS -> Mem_Nao_Volatil: escreve o valor\ndo par na memoria
            Thread_EscreveBatidasNaNVS -> xSemaphoreAcessoSpiffs: Libera o semaforo
            Thread_EscreveBatidasNaNVS -> Thread_EscreveBatidasNaNVS: sleep curto para\nliberar o core
        end
note right: Payload para envio no formato\n{\n"TimestampPublished":\"%s\",\n"trigger_count":%d,\n"gpioName":\"%s\",\n"company":\"%s\",\n"building":\"%s\"\n}

loop infinite times
            loop enquanto nao estiver disponivel
            Thread_enviar_msg_iothub -> xSemaphoreAcessoSpiffs: Verifica disponibilidade\ndo semaforo
            end
            xSemaphoreAcessoSpiffs --> Thread_enviar_msg_iothub:Semaforo livre
            loop 3 times
            Thread_enviar_msg_iothub -> Mem_Nao_Volatil: Requisita valor de uma chave\npassando o nome do\nambiente como\nvalor da chave
            Mem_Nao_Volatil --> Thread_enviar_msg_iothub: Retorna o valor da chave
            Thread_enviar_msg_iothub -> IotHub: Tenta enviar a mensagem
            alt successful case
            Thread_enviar_msg_iothub -> Fila_Batidas_Acumuladas:Adiciona o par(ambiente, -batidas)\nque enviou para o iothub\npara subtrair essas\nbatidas ja computadas\nda mem nao volatil
            else Falha ao enviar a mensagem
            Thread_enviar_msg_iothub -> Thread_enviar_msg_iothub:Nao faz nada\nValor das batidas vai\ncontinuar na memoria nao volatil\nsera computado no proximo\nenvio
            end
        end
            Thread_enviar_msg_iothub -> xSemaphoreAcessoNVS: Libera o semaforo
            Thread_enviar_msg_iothub -> Thread_enviar_msg_iothub: Entra em sleep por 1 minuto

end
note over Thread_enviar_msg_iothub: Caso a conexao com o internet caia\ndurante o envio de uma mensagem,\na execucao daquela funcao continua ativa,\ntentando reestabelecer a comunicacao\npara ai terminar o envio
note over IotHub: No momento, cada ambiente enviaria\nseparado a sua\nmensagem para o iothub,\nassim, seriam enviadas 10 mensagens\na cada 5 minutos
@enduml